# TODO add image and put this code into an appendix at the bottom
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import pyplot as plt
import pylab
import statsmodels.api as sm
import numpy as np
# import airtime

# nFrames = 64
# basic_rate = 6.5

#MCS1
MCS_Mbps = 13
# T_L = airtime.T_total(nFrames, MCS_Mbps, basic_rate)
P = [961.6, 966.29, 958.3, 962.24, 952.21, 963.74, 982.84, 986.49, 980.08, 986.75, 985.92, 980.65, 976.01, 985.83, 984.4, 991.51, 989.09, 987.04, 989.77, 987.91, 994.78, 992.42, 990.07, 990.53, 963.95, 963.22, 966.8, 972.12, 973.97, 973.48, 998.53, 998.85, 997.86, 1001.59, 999.59, 1003.42, 1003.83, 1002.88, 1001.3, 1006.73, 1004.86, 1006.74, 1008.56, 1007.25, 1005.26, 1017.48, 1014.65, 1012.64, 990.8, 995.3, 994.13, 993.29, 986.18, 996.48, 1026.56, 1027.57, 1028.81, 1015.6, 1022.28, 1010.83, 1029.23, 1027.27, 1031.4, 1029.91, 1041.38, 1033.07, 1040.8, 1037.55, 1035.22, 1041.97, 1038.44, 1040.54, 1028.61, 1030.9, 1028.78, 1032.96, 1032.95, 1042.8, 1058.64, 1062.38, 1054.78, 1055.97, 1058.83, 1060.86, 1065.71, 1068.26, 1072.19, 1081.87, 1072.79, 1076.39, 1080.19, 1079.8, 1085.76, 1082.72, 1092.73, 1099.67, 1037.91, 1035.48, 1032.16, 1065.12, 1073.93, 1061.78, 1076.41, 1087.13, 1079.3, 1081.77, 1084.76, 1081.64, 1086.2, 1082.76, 1085.27, 1094.67, 1096.25, 1087.24, 1099.49, 1103.1, 1096.1, 1102.78, 1104.88, 1100.97, 1044.85, 1036.45, 1037.82, 1084.48, 1082.95, 1078.48, 1085.85, 1092.29, 1086.55, 1098.63, 1093.99, 1097.95, 1099.55, 1103.54, 1092.96, 1110.5, 1110.69, 1106.49, 1106.45, 1108.44, 1104.77, 1095.88, 1096.77, 1094.66, 1057.95, 1053.17, 1051.54, 1068.03, 1068.92, 1088.92, 1084.21, 1085.86, 1089.27, 1093.2, 1096.87, 1092.48, 1098.68, 1101.26, 1100.72, 1087.2, 1092.4, 1095.91, 1094.61, 1096.5, 1091.57, 1098.51, 1095.61, 1097.4] # Total power
lambda_r = [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 400, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1500, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800, 1800]           # thruput [x_2]
tau_rx = [0.006153846, 0.006153846, 0.006153846, 0.012307692, 0.012307692, 0.012307692, 0.018461538, 0.018461538, 0.018461538, 0.030769231, 0.030769231, 0.030769231, 0.049230769, 0.049230769, 0.049230769, 0.061538462, 0.061538462, 0.061538462, 0.073846154, 0.073846154, 0.073846154, 0.090461538, 0.090461538, 0.090461538, 0.012307692, 0.012307692, 0.012307692, 0.024615385, 0.024615385, 0.024615385, 0.036923077, 0.036923077, 0.036923077, 0.061538462, 0.061538462, 0.061538462, 0.098461538, 0.098461538, 0.098461538, 0.123076923, 0.123076923, 0.123076923, 0.147692308, 0.147692308, 0.147692308, 0.180923077, 0.180923077, 0.180923077, 0.024615385, 0.024615385, 0.024615385, 0.049230769, 0.049230769, 0.049230769, 0.073846154, 0.073846154, 0.073846154, 0.123076923, 0.123076923, 0.123076923, 0.196923077, 0.196923077, 0.196923077, 0.246153846, 0.246153846, 0.246153846, 0.295384615, 0.295384615, 0.295384615, 0.361846154, 0.361846154, 0.361846154, 0.049230769, 0.049230769, 0.049230769, 0.098461538, 0.098461538, 0.098461538, 0.147692308, 0.147692308, 0.147692308, 0.246153846, 0.246153846, 0.246153846, 0.393846154, 0.393846154, 0.393846154, 0.492307692, 0.492307692, 0.492307692, 0.590769231, 0.590769231, 0.590769231, 0.723692308, 0.723692308, 0.723692308, 0.073846154, 0.073846154, 0.073846154, 0.147692308, 0.147692308, 0.147692308, 0.221538462, 0.221538462, 0.221538462, 0.295384615, 0.295384615, 0.295384615, 0.369230769, 0.369230769, 0.369230769, 0.443076923, 0.443076923, 0.443076923, 0.590769231, 0.590769231, 0.590769231, 0.738461538, 0.738461538, 0.738461538, 0.092307692, 0.092307692, 0.092307692, 0.184615385, 0.184615385, 0.184615385, 0.276923077, 0.276923077, 0.276923077, 0.369230769, 0.369230769, 0.369230769, 0.461538462, 0.461538462, 0.461538462, 0.553846154, 0.553846154, 0.553846154, 0.646153846, 0.646153846, 0.646153846, 0.738461538, 0.738461538, 0.738461538, 0.110769231, 0.110769231, 0.110769231, 0.221538462, 0.221538462, 0.221538462, 0.332307692, 0.332307692, 0.332307692, 0.443076923, 0.443076923, 0.443076923, 0.553846154, 0.553846154, 0.553846154, 0.664615385, 0.664615385, 0.664615385, 0.775384615, 0.775384615, 0.775384615, 0.830769231, 0.830769231, 0.830769231]         # [x_1]print len(Total_Power), len(Throughput)

X = []
for index in range(0,len(P)):
	x = []
	x.append(tau_rx[index])
	x.append(lambda_r[index])
	X.append(x)

y = P

## fit a OLS model with intercept on TV and Radio
X = sm.add_constant(X)
est = sm.OLS(y, X).fit()
print est.summary()

## Create the 3d plot -- skip reading this
# TV/Radio grid for 3d plot
xx1, xx2 = np.meshgrid(np.linspace(min(tau_rx), max(tau_rx), 100), 
                       np.linspace(min(lambda_r), max(lambda_r), 100))
# plot the hyperplane by evaluating the parameters on the grid
Z = est.params[0] + est.params[1] * xx1 + est.params[2] * xx2

# create matplotlib 3d axes
fig = plt.figure(figsize=(12, 8))
ax = Axes3D(fig, azim=-115, elev=15)

# plot hyperplane
surf = ax.plot_surface(xx1, xx2, Z, cmap=plt.cm.RdBu_r, alpha=0.6, linewidth=0)

# plot data points - points over the HP are white, points below are black
"""
resid = y - est.predict(X)
ax.scatter(X[resid >= 0].TV, X[resid >= 0].Radio, y[resid >= 0], color='black', alpha=1.0, facecolor='white')
ax.scatter(X[resid < 0].TV, X[resid < 0].Radio, y[resid < 0], color='black', alpha=1.0)
"""
ax.plot(tau_rx, lambda_r, y, c='k', marker='^')

# set axis labels
ax.set_xlabel('tau_rx')
ax.set_ylabel('lambda_r')
ax.set_zlabel('Total Power')

plt.show()
